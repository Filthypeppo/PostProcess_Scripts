/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  2.1.x                                 |
|   \\  /    A nd           | Web:      www.OpenFOAM.org                      |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    object      sampleDict;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

// Set output format : choice of
//      xmgr
//      jplot
//      gnuplot
//      raw
//      vtk
//      csv
setFormat raw;

// Surface output format. Choice of
//      null        : suppress output
//      ensight     : Ensight Gold format, one field per case file
//      foamFile    : separate points, faces and values file
//      dx          : DX scalar or vector format
//      vtk         : VTK ascii format
//      raw         : x y z value format for use with e.g. gnuplot 'splot'.
//
// Note:
// other formats such as obj, stl, etc can also be written (by proxy)
// but without any values!
surfaceFormat vtk;

// optionally define extra controls for the output formats
formatOptions
{
    ensight
    {
        format  ascii;
    }
}

// interpolationScheme. choice of
//      cell          : use cell-centre value only; constant over cells (default)
//      cellPoint     : use cell-centre and vertex values
//      cellPointFace : use cell-centre, vertex and face values.
//      pointMVC      : use point values only (Mean Value Coordinates)
//      cellPatchConstrained : use cell-centre except on boundary faces where
//        it uses the boundary value. For use with e.g. patchCloudSet.
// 1] vertex values determined from neighbouring cell-centre values
// 2] face values determined using the current face interpolation scheme
//    for the field (linear, gamma, etc.)
interpolationScheme cellPoint;
type	sets;
libs	("libsampling.so");
// Fields to sample.
fields
(
    //p
    U
);

// Set sampling definition: choice of
//      uniform             evenly distributed points on line
//      face                one point per face intersection
//      midPoint            one point per cell, inbetween two face intersections
//      midPointAndFace     combination of face and midPoint
//
//      polyLine            specified points, not nessecary on line, uses
//                          tracking
//      cloud               specified points, uses findCell
//      triSurfaceMeshPointSet  points of triSurface
//
// axis: how to write point coordinate. Choice of
// - x/y/z: x/y/z coordinate only
// - xyz: three columns
//  (probably does not make sense for anything but raw)
// - distance: distance from start of sampling line (if uses line) or
//             distance from first specified sampling point
//
// type specific:
//      uniform, face, midPoint, midPointAndFace : start and end coordinate
//      uniform: extra number of sampling points
//      polyLine, cloud: list of coordinates
//      patchCloud: list of coordinates and set of patches to look for nearest
sets
(
    lineX1
    {
        type        uniform;
        axis        y;

        //- cavity. Slightly perturbed so not to align with face or edge.
        start       (4.5 0 0.05);
        end         (4.5 2 0.05);
        nPoints     100;
    }
	    lineX2
    {
        type        uniform;
        axis        y;

        //- cavity. Slightly perturbed so not to align with face or edge.
        start       (4.6 0 0.05);
        end         (4.6 2 0.05);
        nPoints     100;
    }
	    lineX3
    {
        type        uniform;
        axis        y;

        //- cavity. Slightly perturbed so not to align with face or edge.
        start       (4.7 0 0.05);
        end         (4.7 2 0.05);
        nPoints     100;
    }
	
    lineX4
    {
        type        uniform;
        axis        y;

        //- cavity. Slightly perturbed so not to align with face or edge.
        start       (4.8 0 0.05);
        end         (4.8 2 0.05);
        nPoints     100;
    }
	
    lineX5
    {
        type        uniform;
        axis        y;

        //- cavity. Slightly perturbed so not to align with face or edge.
        start       (4.9 0 0.05);
        end         (4.9 2 0.05);
        nPoints     100;
    }

    lineX6
    {
        type        uniform;
        axis        y;

        //- cavity. Slightly perturbed so not to align with face or edge.
        start       (5 0 0.05);
        end         (5 2 0.05);
        nPoints     100;
    }	

    lineX7
    {
        type        uniform;
        axis        y;

        //- cavity. Slightly perturbed so not to align with face or edge.
        start       (5.1 0 0.05);
        end         (5.1 2 0.05);
        nPoints     100;
    }	
    lineX8
    {
        type        uniform;
        axis        y;

        //- cavity. Slightly perturbed so not to align with face or edge.
        start       (5.2 0.1 0.05);
        end         (5.2 2 0.05);
        nPoints     100;
    }

    lineX9
    {
        type        uniform;
        axis        y;

        //- cavity. Slightly perturbed so not to align with face or edge.
        start       (5.3 0.1 0.05);
        end         (5.3 2 0.05);
        nPoints     100;
    }
    lineX10
    {
        type        uniform;
        axis        y;

        //- cavity. Slightly perturbed so not to align with face or edge.
        start       (5.4 0 0.05);
        end         (5.4 2 0.05);
        nPoints     100;
    }
    lineX11
    {
        type        uniform;
        axis        y;

        //- cavity. Slightly perturbed so not to align with face or edge.
        start       (5.5 0 0.05);
        end         (5.5 1 0.05);
        nPoints     100;
    }

);

surfaces
(

);


// Surface sampling definition
//
// 1] patches are not triangulated by default
// 2] planes are always triangulated
// 3] iso-surfaces are always triangulated

// *********************************************************************** //
